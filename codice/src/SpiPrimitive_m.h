//
// Generated file, do not edit! Created by nedtool 4.6 from SpiPrimitive.msg.
//

#ifndef _SPIPRIMITIVE_M_H_
#define _SPIPRIMITIVE_M_H_

#include <omnetpp.h>

// nedtool version check
#define MSGC_VERSION 0x0406
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of nedtool: 'make clean' should help.
#endif



/**
 * Class generated from <tt>SpiPrimitive.msg:1</tt> by nedtool.
 * <pre>
 * packet setTxModePrimitive
 * {
 *     int channel;
 *     double genTime; //tempo di generazione della primitiva (per collecting delle statistiche)
 * }
 * </pre>
 */
class setTxModePrimitive : public ::cPacket
{
  protected:
    int channel_var;
    double genTime_var;

  private:
    void copy(const setTxModePrimitive& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const setTxModePrimitive&);

  public:
    setTxModePrimitive(const char *name=NULL, int kind=0);
    setTxModePrimitive(const setTxModePrimitive& other);
    virtual ~setTxModePrimitive();
    setTxModePrimitive& operator=(const setTxModePrimitive& other);
    virtual setTxModePrimitive *dup() const {return new setTxModePrimitive(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getChannel() const;
    virtual void setChannel(int channel);
    virtual double getGenTime() const;
    virtual void setGenTime(double genTime);
};

inline void doPacking(cCommBuffer *b, setTxModePrimitive& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, setTxModePrimitive& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>SpiPrimitive.msg:6</tt> by nedtool.
 * <pre>
 * packet confirmSetTxModePrimitive
 * {
 * }
 * </pre>
 */
class confirmSetTxModePrimitive : public ::cPacket
{
  protected:

  private:
    void copy(const confirmSetTxModePrimitive& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const confirmSetTxModePrimitive&);

  public:
    confirmSetTxModePrimitive(const char *name=NULL, int kind=0);
    confirmSetTxModePrimitive(const confirmSetTxModePrimitive& other);
    virtual ~confirmSetTxModePrimitive();
    confirmSetTxModePrimitive& operator=(const confirmSetTxModePrimitive& other);
    virtual confirmSetTxModePrimitive *dup() const {return new confirmSetTxModePrimitive(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, confirmSetTxModePrimitive& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, confirmSetTxModePrimitive& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>SpiPrimitive.msg:9</tt> by nedtool.
 * <pre>
 * packet TxDonePrimitive
 * {
 * }
 * </pre>
 */
class TxDonePrimitive : public ::cPacket
{
  protected:

  private:
    void copy(const TxDonePrimitive& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const TxDonePrimitive&);

  public:
    TxDonePrimitive(const char *name=NULL, int kind=0);
    TxDonePrimitive(const TxDonePrimitive& other);
    virtual ~TxDonePrimitive();
    TxDonePrimitive& operator=(const TxDonePrimitive& other);
    virtual TxDonePrimitive *dup() const {return new TxDonePrimitive(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, TxDonePrimitive& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, TxDonePrimitive& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>SpiPrimitive.msg:12</tt> by nedtool.
 * <pre>
 * packet setRxModePrimitive
 * {
 *     int channel;
 *     double genTime; //tempo di generazione della primitiva (per collecting delle statistiche)
 * }
 * </pre>
 */
class setRxModePrimitive : public ::cPacket
{
  protected:
    int channel_var;
    double genTime_var;

  private:
    void copy(const setRxModePrimitive& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const setRxModePrimitive&);

  public:
    setRxModePrimitive(const char *name=NULL, int kind=0);
    setRxModePrimitive(const setRxModePrimitive& other);
    virtual ~setRxModePrimitive();
    setRxModePrimitive& operator=(const setRxModePrimitive& other);
    virtual setRxModePrimitive *dup() const {return new setRxModePrimitive(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual int getChannel() const;
    virtual void setChannel(int channel);
    virtual double getGenTime() const;
    virtual void setGenTime(double genTime);
};

inline void doPacking(cCommBuffer *b, setRxModePrimitive& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, setRxModePrimitive& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>SpiPrimitive.msg:17</tt> by nedtool.
 * <pre>
 * packet RxNoFramePrimitive
 * {
 * }
 * </pre>
 */
class RxNoFramePrimitive : public ::cPacket
{
  protected:

  private:
    void copy(const RxNoFramePrimitive& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RxNoFramePrimitive&);

  public:
    RxNoFramePrimitive(const char *name=NULL, int kind=0);
    RxNoFramePrimitive(const RxNoFramePrimitive& other);
    virtual ~RxNoFramePrimitive();
    RxNoFramePrimitive& operator=(const RxNoFramePrimitive& other);
    virtual RxNoFramePrimitive *dup() const {return new RxNoFramePrimitive(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, RxNoFramePrimitive& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RxNoFramePrimitive& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>SpiPrimitive.msg:21</tt> by nedtool.
 * <pre>
 * packet RxReadyPrimitive
 * {
 * }
 * </pre>
 */
class RxReadyPrimitive : public ::cPacket
{
  protected:

  private:
    void copy(const RxReadyPrimitive& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const RxReadyPrimitive&);

  public:
    RxReadyPrimitive(const char *name=NULL, int kind=0);
    RxReadyPrimitive(const RxReadyPrimitive& other);
    virtual ~RxReadyPrimitive();
    RxReadyPrimitive& operator=(const RxReadyPrimitive& other);
    virtual RxReadyPrimitive *dup() const {return new RxReadyPrimitive(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, RxReadyPrimitive& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, RxReadyPrimitive& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>SpiPrimitive.msg:24</tt> by nedtool.
 * <pre>
 * packet confirmSetRxModePrimitive
 * {
 * }
 * </pre>
 */
class confirmSetRxModePrimitive : public ::cPacket
{
  protected:

  private:
    void copy(const confirmSetRxModePrimitive& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const confirmSetRxModePrimitive&);

  public:
    confirmSetRxModePrimitive(const char *name=NULL, int kind=0);
    confirmSetRxModePrimitive(const confirmSetRxModePrimitive& other);
    virtual ~confirmSetRxModePrimitive();
    confirmSetRxModePrimitive& operator=(const confirmSetRxModePrimitive& other);
    virtual confirmSetRxModePrimitive *dup() const {return new confirmSetRxModePrimitive(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
};

inline void doPacking(cCommBuffer *b, confirmSetRxModePrimitive& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, confirmSetRxModePrimitive& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>SpiPrimitive.msg:27</tt> by nedtool.
 * <pre>
 * packet getReceivedDataPrimitive
 * {
 *     double genTime; //tempo di generazione della primitiva (per collecting delle statistiche)
 * }
 * </pre>
 */
class getReceivedDataPrimitive : public ::cPacket
{
  protected:
    double genTime_var;

  private:
    void copy(const getReceivedDataPrimitive& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const getReceivedDataPrimitive&);

  public:
    getReceivedDataPrimitive(const char *name=NULL, int kind=0);
    getReceivedDataPrimitive(const getReceivedDataPrimitive& other);
    virtual ~getReceivedDataPrimitive();
    getReceivedDataPrimitive& operator=(const getReceivedDataPrimitive& other);
    virtual getReceivedDataPrimitive *dup() const {return new getReceivedDataPrimitive(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getGenTime() const;
    virtual void setGenTime(double genTime);
};

inline void doPacking(cCommBuffer *b, getReceivedDataPrimitive& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, getReceivedDataPrimitive& obj) {obj.parsimUnpack(b);}

/**
 * Class generated from <tt>SpiPrimitive.msg:31</tt> by nedtool.
 * <pre>
 * packet startTxPrimitive
 * {
 *     double genTime; //tempo di generazione della primitiva (per collecting delle statistiche)
 * }
 * </pre>
 */
class startTxPrimitive : public ::cPacket
{
  protected:
    double genTime_var;

  private:
    void copy(const startTxPrimitive& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const startTxPrimitive&);

  public:
    startTxPrimitive(const char *name=NULL, int kind=0);
    startTxPrimitive(const startTxPrimitive& other);
    virtual ~startTxPrimitive();
    startTxPrimitive& operator=(const startTxPrimitive& other);
    virtual startTxPrimitive *dup() const {return new startTxPrimitive(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual double getGenTime() const;
    virtual void setGenTime(double genTime);
};

inline void doPacking(cCommBuffer *b, startTxPrimitive& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, startTxPrimitive& obj) {obj.parsimUnpack(b);}


#endif // ifndef _SPIPRIMITIVE_M_H_

